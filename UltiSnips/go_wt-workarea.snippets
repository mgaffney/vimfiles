snippet sn-test "test snippet"
${1:HostSetMember}

// 3
${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}

// 16
${16:${1/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}

// 24
${24:`!p snip.rv = t[1].lower()[0] + t[1][1:]`}

// 51
${51:static_${1/([a-z]*)([A-Z]+)/(?1:$1_)\L$2\E/g}}
endsnippet

snippet wt-test-delete "test DeleteResource"
func TestRepository_Delete${1:ResourceExample}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)
	kms := kms.TestKms(t, conn, wrapper)
	iamRepo := iam.TestRepo(t, conn, wrapper)

	${21:org}, ${22:prj} := iam.TestScopes(t, iamRepo)
	${31:`!p snip.rv = t[11].lower()[0] + t[11][1:]`} := test${11:Parent}s(t, conn, ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.PublicId, 1)[0]
	${24:`!p snip.rv = t[1].lower()[0] + t[1][1:]`} := test$1s(t, conn, $31.PublicId, 1)[0]

	new$1Id, err := new$1Id()
	require.NoError(t, err)
	var tests = []struct {
		name      string
		in        string
		want      int
		wantIsErr error
	}{
		{
			name:      "With no public id",
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "With non existing ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}} id",
			in:   new$1Id,
			want: 0,
		},
		{
			name: "With existing $3 id",
			in:   $24.PublicId,
			want: 1,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			repo, err := NewRepository(rw, rw, kms)
			assert.NoError(err)
			require.NotNil(repo)
			got, err := repo.Delete$1(context.Background(), $23.PublicId, tt.in)
			if tt.wantIsErr != nil {
				assert.Truef(errors.Is(err, tt.wantIsErr), "want err: %q got: %q", tt.wantIsErr, err)
				assert.Zero(got)
				return
			}
			require.NoError(err)
			assert.EqualValues(tt.want, got)
		})
	}
}
endsnippet
