snippet wt-test-create "repo CreateResource test"
func TestRepository_Create${1:resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	_, prj := iam.TestScopes(t, conn)

	var tests = []struct {
		name      string
		in        *$1
		opts      []Option
		want      *$1
		wantIsErr error
	}{
		{
			name:      "nil-$1",
			wantIsErr: db.ErrNilParameter,
		},
		{
			name:      "nil-embedded-$1",
			in:        &$1{},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "invalid-no-scope-id",
			in: &$1{
				$1: &store.$1{},
			},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "invalid-public-id-set",
			in: &$1{
				$1: &store.$1{
					ScopeId:  prj.PublicId,
					PublicId: "abcd_OOOOOOOOOO",
				},
			},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "valid-no-options",
			in: &$1{
				$1: &store.$1{
					ScopeId: prj.PublicId,
				},
			},
			want: &$1{
				$1: &store.$1{
					ScopeId: prj.PublicId,
				},
			},
		},
		{
			name: "valid-with-name",
			in: &$1{
				$1: &store.$1{
					ScopeId: prj.PublicId,
					Name:    "test-name-repo",
				},
			},
			want: &$1{
				$1: &store.$1{
					ScopeId: prj.PublicId,
					Name:    "test-name-repo",
				},
			},
		},
		{
			name: "valid-with-description",
			in: &$1{
				$1: &store.$1{
					ScopeId:     prj.PublicId,
					Description: ("test-description-repo"),
				},
			},
			want: &$1{
				$1: &store.$1{
					ScopeId:     prj.PublicId,
					Description: ("test-description-repo"),
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			repo, err := NewRepository(rw, rw, wrapper)
			require.NoError(err)
			require.NotNil(repo)
			got, err := repo.Create$1(context.Background(), tt.in, tt.opts...)
			if tt.wantIsErr != nil {
				assert.Truef(errors.Is(err, tt.wantIsErr), "want err: %q got: %q", tt.wantIsErr, err)
				assert.Nil(got)
				return
			}
			require.NoError(err)
			assert.Empty(tt.in.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.PublicId)
			assert.NotSame(tt.in, got)
			assert.Equal(tt.want.Name, got.Name)
			assert.Equal(tt.want.Description, got.Description)
			assert.Equal(got.CreateTime, got.UpdateTime)
			assert.NoError(db.TestVerifyOplog(t, rw, got.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_CREATE), db.WithCreateNotBefore(10*time.Second)))
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		require.NoError(err)
		require.NotNil(repo)

		_, prj := iam.TestScopes(t, conn)
		in := &$1{
			$1: &store.$1{
				ScopeId: prj.GetPublicId(),
				Name:    "test-name-repo",
			},
		}

		got, err := repo.Create$1(context.Background(), in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		got2, err := repo.Create$1(context.Background(), in)
		assert.Truef(errors.Is(err, db.ErrNotUnique), "want err: %v got: %v", db.ErrNotUnique, err)
		assert.Nil(got2)
	})

	t.Run("valid-duplicate-names-diff-scopes", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		require.NoError(err)
		require.NotNil(repo)

		org, prj := iam.TestScopes(t, conn)
		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.ScopeId = prj.GetPublicId()
		got, err := repo.Create$1(context.Background(), in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		in2.ScopeId = org.GetPublicId()
		got2, err := repo.Create$1(context.Background(), in2)
		require.NoError(err)
		require.NotNil(got2)
		assertPublicId(t, $1Prefix, got2.PublicId)
		assert.NotSame(in2, got2)
		assert.Equal(in2.Name, got2.Name)
		assert.Equal(in2.Description, got2.Description)
		assert.Equal(got2.CreateTime, got2.UpdateTime)
	})
}
endsnippet

snippet wt-test-update "repo UpdateResource test"
func TestRepository_Update${1:resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	changeName := func(s string) func(*$1) *$1 {
		return func(${2:resource_var} *$1) *$1 {
			$2.Name = s
			return $2
		}
	}

	changeDescription := func(s string) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.Description = s
			return $2
		}
	}

	makeNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return nil
		}
	}

	makeEmbeddedNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return &$1{}
		}
	}

	deletePublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = ""
			return $2
		}
	}

	nonExistentPublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = "abcd_OOOOOOOOOO"
			return $2
		}
	}

	combine := func(fns ...func($2 *$1) *$1) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			for _, fn := range fns {
				$2 = fn($2)
			}
			return $2
		}
	}

	var tests = []struct {
		name      string
		orig      *$1
		chgFn     func(*$1) *$1
		masks     []string
		want      *$1
		wantCount int
		wantIsErr error
	}{
		{
			name: "nil-$1",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeNil(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "nil-embedded-$1",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeEmbeddedNil(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "no-public-id",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     deletePublicId(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "updating-non-existent-$1",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     combine(nonExistentPublicId(), changeName("test-update-name-repo")),
			masks:     []string{"Name"},
			wantIsErr: db.ErrRecordNotFound,
		},
		{
			name: "empty-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			wantIsErr: db.ErrEmptyFieldMask,
		},
		{
			name: "read-only-fields-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"PublicId", "CreateTime", "UpdateTime", "ScopeId"},
			wantIsErr: db.ErrInvalidFieldMask,
		},
		{
			name: "unknown-field-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"Bilbo"},
			wantIsErr: db.ErrInvalidFieldMask,
		},
		{
			name: "change-name",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn: changeName("test-update-name-repo"),
			masks: []string{"Name"},
			want: &$1{
				$1: &store.$1{
					Name: "test-update-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-description",
			orig: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			chgFn: changeDescription("test-update-description-repo"),
			masks: []string{"Description"},
			want: &$1{
				$1: &store.$1{
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-name-and-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("test-update-name-repo")),
			masks: []string{"Name", "Description"},
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			repo, err := NewRepository(rw, rw, wrapper)
			assert.NoError(err)
			require.NotNil(repo)
			_, prj := iam.TestScopes(t, conn)
			tt.orig.ScopeId = prj.GetPublicId()
			orig, err := repo.Create$1(context.Background(), tt.orig)
			assert.NoError(err)
			require.NotNil(orig)

			if tt.chgFn != nil {
				orig = tt.chgFn(orig)
			}
			got, gotCount, err := repo.Update$1(context.Background(), orig, tt.masks)
			if tt.wantIsErr != nil {
				assert.Truef(errors.Is(err, tt.wantIsErr), "want err: %q got: %q", tt.wantIsErr, err)
				assert.Equal(tt.wantCount, gotCount, "row count")
				assert.Nil(got)
				return
			}
			assert.NoError(err)
			assert.Empty(tt.orig.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.PublicId)
			assert.Equal(tt.wantCount, gotCount, "row count")
			assert.NotSame(tt.orig, got)
			assert.Equal(tt.orig.ScopeId, got.ScopeId)
			dbassert := dbassert.New(t, rw)
			if tt.want.Name == "" {
				dbassert.IsNull(got, "name")
				return
			}
			assert.Equal(tt.want.Name, got.Name)
			if tt.want.Description == "" {
				dbassert.IsNull(got, "description")
				return
			}
			assert.Equal(tt.want.Description, got.Description)
			if tt.wantCount > 0 {
				assert.NoError(db.TestVerifyOplog(t, rw, got.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
			}
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		name := "test-dup-name"
		${3:resource_slice_var} := test$1s(t, conn, 2)
		$2a := $3[0]
		$2a.Name = name
		got1, gotCount1, err := repo.Update$1(context.Background(), $2a, []string{"name"})
		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(name, got1.Name)
		assert.Equal(1, gotCount1, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, $2a.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))

		$2b := $3[1]
		$2b.Name = name
		got2, gotCount2, err := repo.Update$1(context.Background(), $2b, []string{"name"})
		assert.Truef(errors.Is(err, db.ErrNotUnique), "want err: %v got: %v", db.ErrNotUnique, err)
		assert.Nil(got2)
		assert.Equal(db.NoRowsAffected, gotCount2, "row count")
		err = db.TestVerifyOplog(t, rw, $2b.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second))
		assert.Error(err)
		assert.True(errors.Is(db.ErrRecordNotFound, err))
	})

	t.Run("valid-duplicate-names-diff-scopes", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		org, prj := iam.TestScopes(t, conn)
		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.ScopeId = prj.GetPublicId()
		got, err := repo.Create$1(context.Background(), in)
		assert.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)

		in2.ScopeId = org.GetPublicId()
		in2.Name = "first-name"
		got2, err := repo.Create$1(context.Background(), in2)
		assert.NoError(err)
		require.NotNil(got2)
		got2.Name = got.Name
		got3, gotCount3, err := repo.Update$1(context.Background(), got2, []string{"name"})
		assert.NoError(err)
		require.NotNil(got3)
		assert.NotSame(got2, got3)
		assert.Equal(got.Name, got3.Name)
		assert.Equal(got2.Description, got3.Description)
		assert.Equal(1, gotCount3, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, got2.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
	})

	t.Run("change-scope-id", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		$2a, $2b := test$1(t, conn), test$1(t, conn)
		assert.NotEqual($2a.ScopeId, $2b.ScopeId)
		orig := $2a.clone()

		$2a.ScopeId = $2b.ScopeId
		assert.Equal($2a.ScopeId, $2b.ScopeId)

		got1, gotCount1, err := repo.Update$1(context.Background(), $2a, []string{"name"})

		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(orig.ScopeId, got1.ScopeId)
		assert.Equal(1, gotCount1, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, $2a.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
	})
}
endsnippet

snippet wt-test-child-create "repo child resource Create test"
func TestRepository_Create${1:resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	${3:pp} := ${4:testParents}(t, conn, 1)
	${5:p} := $3[0]

	var tests = []struct {
		name      string
		in        *$1
		opts      []Option
		want      *$1
		wantIsErr error
	}{
		{
			name:      "nil-$1",
			wantIsErr: db.ErrNilParameter,
		},
		{
			name:      "nil-embedded-$1",
			in:        &$1{},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "invalid-no-parent-id",
			in: &$1{
				$1: &store.$1{},
			},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "invalid-public-id-set",
			in: &$1{
				$1: &store.$1{
					${6:ParentId}:  $5.PublicId,
					PublicId: "abcd_OOOOOOOOOO",
				},
			},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "valid-no-options",
			in: &$1{
				$1: &store.$1{
					$6: $5.PublicId,
				},
			},
			want: &$1{
				$1: &store.$1{
					$6: $5.PublicId,
				},
			},
		},
		{
			name: "valid-with-name",
			in: &$1{
				$1: &store.$1{
					$6: $5.PublicId,
					Name:    "test-name-repo",
				},
			},
			want: &$1{
				$1: &store.$1{
					$6: $5.PublicId,
					Name:    "test-name-repo",
				},
			},
		},
		{
			name: "valid-with-description",
			in: &$1{
				$1: &store.$1{
					$6:     $5.PublicId,
					Description: ("test-description-repo"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$6:     $5.PublicId,
					Description: ("test-description-repo"),
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			repo, err := NewRepository(rw, rw, wrapper)
			require.NoError(err)
			require.NotNil(repo)
			got, err := repo.Create$1(context.Background(), tt.in, tt.opts...)
			if tt.wantIsErr != nil {
				assert.Truef(errors.Is(err, tt.wantIsErr), "want err: %q got: %q", tt.wantIsErr, err)
				assert.Nil(got)
				return
			}
			require.NoError(err)
			assert.Empty(tt.in.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.PublicId)
			assert.NotSame(tt.in, got)
			assert.Equal(tt.want.Name, got.Name)
			assert.Equal(tt.want.Description, got.Description)
			assert.Equal(got.CreateTime, got.UpdateTime)
			assert.NoError(db.TestVerifyOplog(t, rw, got.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_CREATE), db.WithCreateNotBefore(10*time.Second)))
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		require.NoError(err)
		require.NotNil(repo)

		$4 := $4(t, conn, 1)
		$5 := $4[0]

		in := &$1{
			$1: &store.$1{
				$6: $5.GetPublicId(),
				Name:    "test-name-repo",
			},
		}

		got, err := repo.Create$1(context.Background(), in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		got2, err := repo.Create$1(context.Background(), in)
		assert.Truef(errors.Is(err, db.ErrNotUnique), "want err: %v got: %v", db.ErrNotUnique, err)
		assert.Nil(got2)
	})

	t.Run("valid-duplicate-names-diff-parents", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		require.NoError(err)
		require.NotNil(repo)

		$4 := $4(t, conn, 2)
		$5One, $5Two  := $4[0], $4[1]
		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.$6 = $5One.GetPublicId()
		got, err := repo.Create$1(context.Background(), in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		in2.$6 = $5Two.GetPublicId()
		got2, err := repo.Create$1(context.Background(), in2)
		require.NoError(err)
		require.NotNil(got2)
		assertPublicId(t, $1Prefix, got2.PublicId)
		assert.NotSame(in2, got2)
		assert.Equal(in2.Name, got2.Name)
		assert.Equal(in2.Description, got2.Description)
		assert.Equal(got2.CreateTime, got2.UpdateTime)
	})
}
endsnippet

snippet wt-test-child-update "repo child UpdateResource test"
func TestRepository_Update${1:Resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	changeName := func(s string) func(*$1) *$1 {
		return func(${2:resource_var} *$1) *$1 {
			$2.Name = s
			return $2
		}
	}

	changeDescription := func(s string) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.Description = s
			return $2
		}
	}

	makeNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return nil
		}
	}

	makeEmbeddedNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return &$1{}
		}
	}

	deletePublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = ""
			return $2
		}
	}

	nonExistentPublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = "abcd_OOOOOOOOOO"
			return $2
		}
	}

	combine := func(fns ...func($2 *$1) *$1) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			for _, fn := range fns {
				$2 = fn($2)
			}
			return $2
		}
	}

	var tests = []struct {
		name      string
		orig      *$1
		chgFn     func(*$1) *$1
		masks     []string
		want      *$1
		wantCount int
		wantIsErr error
	}{
		{
			name: "nil-$1",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeNil(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "nil-embedded-$1",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeEmbeddedNil(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrNilParameter,
		},
		{
			name: "no-public-id",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     deletePublicId(),
			masks:     []string{"Name", "Description"},
			wantIsErr: db.ErrInvalidParameter,
		},
		{
			name: "updating-non-existent-$1",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     combine(nonExistentPublicId(), changeName("test-update-name-repo")),
			masks:     []string{"Name"},
			wantIsErr: db.ErrRecordNotFound,
		},
		{
			name: "empty-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			wantIsErr: db.ErrEmptyFieldMask,
		},
		{
			name: "read-only-fields-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"PublicId", "CreateTime", "UpdateTime", "$6"},
			wantIsErr: db.ErrInvalidFieldMask,
		},
		{
			name: "unknown-field-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"Bilbo"},
			wantIsErr: db.ErrInvalidFieldMask,
		},
		{
			name: "change-name",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn: changeName("test-update-name-repo"),
			masks: []string{"Name"},
			want: &$1{
				$1: &store.$1{
					Name: "test-update-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-description",
			orig: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			chgFn: changeDescription("test-update-description-repo"),
			masks: []string{"Description"},
			want: &$1{
				$1: &store.$1{
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-name-and-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("test-update-name-repo")),
			masks: []string{"Name", "Description"},
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			repo, err := NewRepository(rw, rw, wrapper)
			assert.NoError(err)
			require.NotNil(repo)

			${3:org|prj}, _ := iam.TestScopes(t, conn)
			${5:parentVar} := Test${4:ParentResource}s(t, conn, $3.PublicId, 1)[0]

			tt.orig.${6:ParentId} = $5.PublicId
			orig, err := repo.Create$1(context.Background(), tt.orig)
			assert.NoError(err)
			require.NotNil(orig)

			if tt.chgFn != nil {
				orig = tt.chgFn(orig)
			}
			got, gotCount, err := repo.Update$1(context.Background(), orig, tt.masks)
			if tt.wantIsErr != nil {
				assert.Truef(errors.Is(err, tt.wantIsErr), "want err: %q got: %q", tt.wantIsErr, err)
				assert.Equal(tt.wantCount, gotCount, "row count")
				assert.Nil(got)
				return
			}
			assert.NoError(err)
			assert.Empty(tt.orig.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.PublicId)
			assert.Equal(tt.wantCount, gotCount, "row count")
			assert.NotSame(tt.orig, got)
			assert.Equal(tt.orig.$6, got.$6)
			dbassert := dbassert.New(t, rw)
			if tt.want.Name == "" {
				dbassert.IsNull(got, "name")
				return
			}
			assert.Equal(tt.want.Name, got.Name)
			if tt.want.Description == "" {
				dbassert.IsNull(got, "description")
				return
			}
			assert.Equal(tt.want.Description, got.Description)
			if tt.wantCount > 0 {
				assert.NoError(db.TestVerifyOplog(t, rw, got.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
			}
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		name := "test-dup-name"
		$3, _ := iam.TestScopes(t, conn)
		$5 := Test$4s(t, conn, $3.PublicId, 1)[0]
		${7:resource_slice_var} := Test$1s(t, conn, $5.PublicId, 2)

		$2a := $7[0]
		$2b := $7[1]

		$2a.Name = name
		got1, gotCount1, err := repo.Update$1(context.Background(), $2a, []string{"name"})
		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(name, got1.Name)
		assert.Equal(1, gotCount1, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, $2a.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))

		$2b.Name = name
		got2, gotCount2, err := repo.Update$1(context.Background(), $2b, []string{"name"})
		assert.Truef(errors.Is(err, db.ErrNotUnique), "want err: %v got: %v", db.ErrNotUnique, err)
		assert.Nil(got2)
		assert.Equal(db.NoRowsAffected, gotCount2, "row count")
		err = db.TestVerifyOplog(t, rw, $2b.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second))
		assert.Error(err)
		assert.True(errors.Is(db.ErrRecordNotFound, err))
	})

	t.Run("valid-duplicate-names-diff-$4s", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		$3, _ := iam.TestScopes(t, conn)
		${8:parent_slice_var} := Test$4s(t, conn, $3.PublicId, 2)

		$5a := $8[0]
		$5b := $8[1]

		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.$6 = $5a.PublicId
		got, err := repo.Create$1(context.Background(), in)
		assert.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.PublicId)
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)

		in2.$6 = $5b.PublicId
		in2.Name = "first-name"
		got2, err := repo.Create$1(context.Background(), in2)
		assert.NoError(err)
		require.NotNil(got2)
		got2.Name = got.Name
		got3, gotCount3, err := repo.Update$1(context.Background(), got2, []string{"name"})
		assert.NoError(err)
		require.NotNil(got3)
		assert.NotSame(got2, got3)
		assert.Equal(got.Name, got3.Name)
		assert.Equal(got2.Description, got3.Description)
		assert.Equal(1, gotCount3, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, got2.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
	})

	t.Run("change-scope-id", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		repo, err := NewRepository(rw, rw, wrapper)
		assert.NoError(err)
		require.NotNil(repo)

		$3, _ := iam.TestScopes(t, conn)
		$8 := Test$4s(t, conn, $3.PublicId, 2)

		$5a := $8[0]
		$5b := $8[1]

		$2a := Test$1s(t, conn, $5a.PublicId, 1)[0]
		$2b := Test$1s(t, conn, $5b.PublicId, 1)[0]

		assert.NotEqual($2a.$6, $2b.$6)
		orig := $2a.clone()

		$2a.$6 = $2b.$6
		assert.Equal($2a.$6, $2b.$6)

		got1, gotCount1, err := repo.Update$1(context.Background(), $2a, []string{"name"})

		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(orig.$6, got1.$6)
		assert.Equal(1, gotCount1, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, $2a.PublicId, db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
	})
}
endsnippet

snippet wt-test-new-resource "NewResource Test"
func Test${1:resource}_New(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	w := db.New(conn)
	_, ${2:prj} := iam.TestScopes(t, conn)

	type args struct {
		scopeId string
		opts    []Option
	}

	var tests = []struct {
		name    string
		args    args
		want    *$1
		wantErr bool
	}{
		{
			name: "blank-scopeId",
			args: args{
				scopeId: "",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "valid-no-options",
			args: args{
				scopeId: $2.GetPublicId(),
			},
			want: &$1{
				$1: &store.$1{
					ScopeId: $2.GetPublicId(),
				},
			},
		},
		{
			name: "valid-with-name",
			args: args{
				scopeId: $2.GetPublicId(),
				opts: []Option{
					WithName("test-name"),
				},
			},
			want: &$1{
				$1: &store.$1{
					ScopeId: $2.GetPublicId(),
					Name:    "test-name",
				},
			},
		},
		{
			name: "valid-with-description",
			args: args{
				scopeId: $2.GetPublicId(),
				opts: []Option{
					WithDescription("test-description"),
				},
			},
			want: &$1{
				$1: &store.$1{
					ScopeId:     $2.GetPublicId(),
					Description: "test-description",
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			got, err := New$1(tt.args.scopeId, tt.args.opts...)
			if tt.wantErr {
				assert.Error(err)
				require.Nil(got)
				return
			}
			require.NoError(err)
			require.NotNil(got)

			assert.Emptyf(got.PublicId, "PublicId set")
			assert.Equal(tt.want, got)

			id, err := new$1Id()
			assert.NoError(err)

			tt.want.PublicId = id
			got.PublicId = id

			err2 := w.Create(context.Background(), got)
			assert.NoError(err2)
		})
	}
}
endsnippet

snippet wt-test-new-child-resource "child NewResource Test"
func Test${1:resource}_New(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	w := db.New(conn)

	${3:pp} := ${4:testParents}(t, conn, 1)
	${5:p} := $3[0]

	type args struct {
		parentId string
		opts    []Option
	}

	var tests = []struct {
		name    string
		args    args
		want    *$1
		wantErr bool
	}{
		{
			name: "blank-parent-id",
			args: args{
				parentId: "",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "valid-no-options",
			args: args{
				parentId: $5.GetPublicId(),
			},
			want: &$1{
				$1: &store.$1{
					${6:ParentId}:  $5.GetPublicId(),
				},
			},
		},
		{
			name: "valid-with-name",
			args: args{
				parentId: $5.GetPublicId(),
				opts: []Option{
					WithName("test-name"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$6:  $5.GetPublicId(),
					Name: "test-name",
				},
			},
		},
		{
			name: "valid-with-description",
			args: args{
				parentId: $5.GetPublicId(),
				opts: []Option{
					WithDescription("test-description"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$6:  $5.GetPublicId(),
					Description: "test-description",
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			got, err := New$1(tt.args.parentId, tt.args.opts...)
			if tt.wantErr {
				assert.Error(err)
				require.Nil(got)
				return
			}
			require.NoError(err)
			require.NotNil(got)

			assert.Emptyf(got.PublicId, "PublicId set")
			assert.Equal(tt.want, got)

			id, err := new$1Id()
			assert.NoError(err)

			tt.want.PublicId = id
			got.PublicId = id

			err2 := w.Create(context.Background(), got)
			assert.NoError(err2)
		})
	}
}
endsnippet
