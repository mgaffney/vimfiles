#########
# Snippet variables
#  $1 - Resource
# $2 resource_var
#  $7 - resource (lower case) - with !p
#  	$3 resource_slice_var
#  $4 - resource_var - with !p
#  $2 - Parent
#  $3 - parentId - with !p
#  $6 - package name - with !p
#  $5 - table_name
#
#  $4 - testParents
#  $3 - testParents_var
#  $5 - testParent_var
#  $6 - ParentId
#  $7 resource_slice_var
#  $8 parent_slice_var
#  --- Missing
#  prefix for database id
#  test scopes - org, prj
#  ---
# New
# 1,5 resource
# 6,10 parent
# 11,15 package
# 16,20 database
# 21,25 test
#########

snippet old-wt-resource "resource skeleton"
// A $1 contains ${0}. It is owned by a ${2:Parent}.
type ${1:Resource} struct {
	*store.$1
	tableName string \`gorm:"-"\`
}

// New$1 creates a new in memory $1 assigned to $3.
// Name and description are the only valid options. All other options are
// ignored.
func New$1(${3:`!p snip.rv = t[2].lower() + 'Id'`} string, opt ...Option) (*$1, error) {
	if $3 == "" {
		return nil, fmt.Errorf("new: ${6:`!v expand('%:p:h:t')`} ${7:`!p snip.rv=t[1].lower()`}: no $3: %w", db.ErrInvalidParameter)
	}

	opts := getOpts(opt...)
	${4:`!p snip.rv = t[1].lower()[0]`} := &$1{
		$1: &store.$1{
			$2Id:        $3,
			Name:        opts.withName,
			Description: opts.withDescription,
		},
	}
	return $4, nil
}

func alloc$1() $1 {
	return $1{
		$1: &store.$1{},
	}
}

func ($4 *$1) clone() *$1 {
	cp := proto.Clone($4.$1)
	return &$1{
		$1: cp.(*store.$1),
	}
}

// TableName returns the table name.
func ($4 *$1) TableName() string {
	if $4.tableName != "" {
		return $4.tableName
	}
	return "${5:table_name}"
}

// SetTableName sets the table name.
func ($4 *$1) SetTableName(n string) {
	$4.tableName = n
}

func ($4 *$1) oplog(op oplog.OpType) oplog.Metadata {
	metadata := oplog.Metadata{
		"resource-public-id": []string{$4.PublicId},
		"resource-type":      []string{"$6-$7"},
		"op-type":            []string{op.String()},
	}
	if $4.$2Id != "" {
		metadata["`!p snip.rv=t[2].lower()`-id"] = []string{$4.$2Id}
	}
	return metadata
}
endsnippet

# 3 -> 99
# 2 -> 3
# 4 -> 2
# 99 -> 41
# 5 -> 12
#
# 2 is auth method

snippet old-wt-create "repo CreateResource"
// Create${1:Resource} inserts ${4:resource_var} into the repository and returns a new
// $1 containing the $2's PublicId. $4 is not changed. $4 must
// contain a valid ${5:ScopeId}. $4 must not contain a PublicId. The PublicId is
// generated and assigned by this method. opt is ignored.
//
// Both $4.Name and $4.Description are optional. If $4.Name is set, it must be
// unique within $4.$5.
func (r *Repository) Create$1(ctx context.Context, $4 *$1, opt ...Option) (*$1, error) {
	if $4 == nil {
		return nil, fmt.Errorf("create: ${3:package} ${2:friendlyName}: %w", db.ErrNilParameter)
	}
	if $4.$1 == nil {
		return nil, fmt.Errorf("create: $4 $2: embedded $1: %w", db.ErrNilParameter)
	}
	if $4.$5 == "" {
		return nil, fmt.Errorf("create: $4 $2: no ${6:scope} id: %w", db.ErrInvalidParameter)
	}
	if $4.PublicId != "" {
		return nil, fmt.Errorf("create: $4 $2: public id not empty: %w", db.ErrInvalidParameter)
	}
	$4 = $4.clone()

	id, err := new$1Id()
	if err != nil {
		return nil, fmt.Errorf("create: $4 $2: %w", err)
	}
	$4.PublicId = id

	metadata := new$1Metadata($4, oplog.OpType_OP_TYPE_CREATE)

	var new$1 *$1
	_, err = r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
		func(w db.Writer) error {
			new$1 = $4.clone()
			return w.Create(ctx, new$1, db.WithOplog(r.wrapper, metadata))
		},
	)

	if err != nil {
		if db.IsUniqueError(err) {
			return nil, fmt.Errorf("create: $4 $2: in $6: %s: name %s already exists: %w",
				$4.$5, $4.Name, db.ErrNotUnique)
		}
		return nil, fmt.Errorf("create: $4 $2: in $6: %s: %w", $4.$5, err)
	}
	return new$1, nil
}

func alloc$1() *$1 {
	fresh := &$1{
		$1: &store.$1{},
	}
	return fresh
}

func new$1Metadata($4 *$1, op oplog.OpType) oplog.Metadata {
	metadata := oplog.Metadata{
		"resource-public-id": []string{$4.GetPublicId()},
		"resource-type":      []string{"$4 $2"},
		"op-type":            []string{op.String()},
	}
	if $4.$5 != "" {
		metadata["$6-id"] = []string{$4.$5}
	}
	return metadata
}
endsnippet

# 3 -> 99
# 4 -> 3
# 99 -> 41
snippet old-wt-update "repo UpdateResource"
// Update${1:Resource} updates the repository entry for ${2:resource_var}.PublicId with the
// values in $2 for the fields listed in fieldMask. It returns a new
// $1 containing the updated values and a count of the number of
// records updated. $2 is not changed.
//
// $2 must contain a valid PublicId. Only $2.Name and $2.Description can be
// updated. If $2.Name is set to a non-empty string, it must be unique
// within $2.ScopeId.
//
// An attribute of $2 will be set to NULL in the database if the attribute
// in $2 is the zero value and it is included in fieldMask.
func (r *Repository) Update$1(ctx context.Context, $2 *$1, fieldMask []string, opt ...Option) (*$1, int, error) {
	if $2 == nil {
		return nil, db.NoRowsAffected, fmt.Errorf("update: ${3:package} ${4:friendlyName}: %w", db.ErrNilParameter)
	}
	if $2.$1 == nil {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: embedded $1: %w", db.ErrNilParameter)
	}
	if $2.PublicId == "" {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: missing public id: %w", db.ErrInvalidParameter)
	}
	if len(fieldMask) == 0 {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: %w", db.ErrEmptyFieldMask)
	}

	for _, f := range fieldMask {
		switch {
		case strings.EqualFold("Name", f):
		case strings.EqualFold("Description", f):
		default:
			return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: field: %s: %w", f, db.ErrInvalidFieldMask)
		}
	}
	var dbMask, nullFields []string
	dbMask, nullFields = dbcommon.BuildUpdatePaths(
		map[string]interface{}{
			"Name":        $2.Name,
			"Description": $2.Description,
		},
		fieldMask,
	)
	if len(dbMask) == 0 && len(nullFields) == 0 {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: %w", db.ErrEmptyFieldMask)
	}

	$2 = $2.clone()

	metadata := $2.oplog(oplog.OpType_OP_TYPE_UPDATE)

	var rowsUpdated int
	var returned$1 *$1
	_, err := r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
		func(_ db.Reader, w db.Writer) error {
			returned$1 = $2.clone()
			var err error
			rowsUpdated, err = w.Update(ctx, returned$1, dbMask, nullFields, db.WithOplog(r.wrapper, metadata))
			if err == nil && rowsUpdated > 1 {
				return db.ErrMultipleRecords
			}
			return err
		},
	)

	if err != nil {
		if db.IsUniqueError(err) {
			return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: %s: name %s already exists: %w",
				$2.PublicId, $2.Name, db.ErrNotUnique)
		}
		return nil, db.NoRowsAffected, fmt.Errorf("update: $3 $4: %s: %w", $2.PublicId, err)
	}

	return returned$1, rowsUpdated, nil
}
endsnippet

snippet old-wt-enc-struct "encrypt/decrypt stuct"
func (${2:resource_var} *${1:Resource}) encrypt(ctx context.Context, cipher wrapping.Wrapper) error {
	if err := structwrapping.WrapStruct(ctx, cipher, $2.$1, nil); err != nil {
		return fmt.Errorf("error encrypting ${3:resource}: %w", err)
	}
	return nil
}

func ($2 *$1) decrypt(ctx context.Context, cipher wrapping.Wrapper) error {
	if err := structwrapping.UnwrapStruct(ctx, cipher, $2.$1, nil); err != nil {
		return fmt.Errorf("error decrypting $3: %w", err)
	}
	return nil
}
endsnippet
