#########
# Snippet variables - remap

#  $1 - ResourceExample
# 	${1:ResourceExample}
#  $2 - r - with !p
# 	${2:`!p snip.rv = t[1].lower()[0]`}
#  $3 - resource example (friendly name lower case with spaces like 'auth method') - with !p
#       ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}
#  $4 - resourceExampleId - with !p
#       ${4:`!p snip.rv = t[1].lower()[0] + t[1][1:] + 'Id'`}
#  $5 - resource-example (friendly string) (not a variable)
#       ${5:${1/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}
#  $6 - resourceExamples (slice variable)
#       ${6:`!p snip.rv = t[1].lower()[0] + t[1][1:] + 's'`}

#  $11 - ParentExample
# 	${11:ParentExample}
#  $12 - ParentExampleId - with !p
# 	${12:`!p snip.rv = t[11] + 'Id'`}
#  $13 - parentExampleId - with !p
#       ${13:`!p snip.rv = t[11].lower()[0] + t[11][1:] + 'Id'`}
#  $14 - parent example friendly name (lower case, not a variable)
# 	${14:`!p snip.rv = t[11].lower()[0] + t[11][1:]`}
#  $15 - parent example id (friendly string) (not a variable)
#       ${15:${12/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}
#  $16 - parent-example-id (friendly string) (not a variable)
#       ${16:${12/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}
#  $17 - parent_example_id (database column)
#       ${17:${13/([a-z]*)([A-Z]+)/(?1:$1_)\L$2\E/g}}
#  $18 - parent-example (friendly string) (not a variable)
#       ${18:${11/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}

#  $21 - org
# 	${21:org}
#  $22 - prj
# 	${21:org}, ${22:prj} := iam.TestScopes(t, conn)
#  $23 - org or prj with !p
# 	${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}
#  $24 - resourceExample (test resource var)
#       ${24:`!p snip.rv = t[1].lower()[0] + t[1][1:]`}
#  $25 - rs - with !p (test)
# 	${25:`!p snip.rv = t[2] + 's'`}
#  $26 - resource-examples (test name 'auth-methods')
#       ${26:${6/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}

#  $31 - parent (test parent var)
# 	${31:`!p snip.rv = t[11].lower()[0] + t[11][1:]`}
#  $32 - parents (test parent_slice_var) with !p
# 	${32:`!p snip.rv = t[31] + 's'`}
# 	${32:`!p snip.rv = t[11].lower()[0] + t[11][1:] + 's'`}

#  $41 - package name - with !p
# 	${41:`!v expand('%:p:h:t')`}
#  $51 - table_name
#       ${51:$41_${1/([a-z]*)([A-Z]+)/(?1:$1_)\L$2\E/g}}

###### old
#  $4 - testParents
#  $3 - testParents_var
#  $5 - testParent_var
#  $6 - ParentId
#  $7 resource_slice_var
#  $8 parent_slice_var
#  --- Missing
#  prefix for database id
#  test scopes - org, prj
#  ---
# New
#
# 1,9 resource
# 11,19 parent
#
# 21,29 test resource
# 31,39 test parent
#
# 41,49 package
# 51,59 database

# 1,5 resource
# 6,10 parent
# 11,15 package
# 16,20 database
# 21,25 test resource
# 26,30 test parent

# ${4:`!p snip.rv = t[1].lower()[0]`}
#
#########

snippet wt-resource "resource skeleton"
// A $1 contains . It is owned by a ${11:Parent}.
type ${1:Resource} struct {
	*store.$1
	tableName string \`gorm:"-"\`
}

// New$1 creates a new in memory $1 assigned to $13.
// Name and description are the only valid options.
// All other options are ignored.
func New$1(${13:`!p snip.rv = t[11].lower()[0] + t[11][1:] + 'Id'`} string, opt ...Option) (*$1, error) {
	const op = "${41:`!v expand('%:p:h:t')`}.New$1"
	if $13 == "" {
		return nil, errors.New(errors.InvalidParameter, op, "no ${15:${12/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}")
	}

	opts := getOpts(opt...)
	${2:`!p snip.rv = t[1].lower()[0]`} := &$1{
		$1: &store.$1{
			${12:`!p snip.rv = t[11] + 'Id'`}: $13,
			Name:        opts.withName,
			Description: opts.withDescription,
		},
	}
	return $2, nil
}

func alloc$1() *$1 {
	return &$1{
		$1: &store.$1{},
	}
}

func ($2 *$1) clone() *$1 {
	cp := proto.Clone($2.$1)
	return &$1{
		$1: cp.(*store.$1),
	}
}

// TableName returns the table name.
func ($2 *$1) TableName() string {
	if $2.tableName != "" {
		return $2.tableName
	}
	return "${51:$41_${1/([a-z]*)([A-Z]+)/(?1:$1_)\L$2\E/g}}"
}

// SetTableName sets the table name.
func ($2 *$1) SetTableName(n string) {
	$2.tableName = n
}

func ($2 *$1) oplog(op oplog.OpType) oplog.Metadata {
	metadata := oplog.Metadata{
		"resource-public-id": []string{$2.PublicId},
		"resource-type":      []string{"${5:${1/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}"},
		"op-type":            []string{op.String()},
	}
	if $2.$12 != "" {
		metadata["${16:${12/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}"] = []string{$2.$12}
	}
	return metadata
}
endsnippet

snippet wt-create "CreateResource"
// Create${1:Resource} inserts ${2:`!p snip.rv = t[1].lower()[0]`}
// into the repository and returns a new
// $1 containing the ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}'s PublicId.
// $2 is not changed.
// $2 must contain a valid ${11:Parent}Id.
// $2 must not contain a PublicId.
// The PublicId is generated and assigned by this method.
// opt is ignored.
//
// Both $2.Name and $2.Description are optional.
// If $2.Name is set, it must be unique within $2.${12:`!p snip.rv = t[11] + 'Id'`}.
func (r *Repository) Create$1(ctx context.Context, scopeId string, $2 *$1, opt ...Option) (*$1, error) {
	if $2 == nil {
		return nil, fmt.Errorf("create: ${41:`!v expand('%:p:h:t')`} $3: %w", db.ErrNilParameter)
	}
	if $2.$1 == nil {
		return nil, fmt.Errorf("create: $41 $3: embedded $1: %w", db.ErrNilParameter)
	}
	if $2.$12 == "" {
		return nil, fmt.Errorf("create: $41 $3: no ${15:${12/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: %w", db.ErrInvalidParameter)
	}
	if $2.PublicId != "" {
		return nil, fmt.Errorf("create: $41 $3: public id not empty: %w", db.ErrInvalidParameter)
	}
	if scopeId == "" {
		return nil, fmt.Errorf("create: $41 $3: no scopeId: %w", db.ErrNilParameter)
	}
	$2 = $2.clone()

	id, err := new$1Id()
	if err != nil {
		return nil, fmt.Errorf("create: $41 $3: %w", err)
	}
	$2.PublicId = id

	oplogWrapper, err := r.kms.GetWrapper(ctx, scopeId, kms.KeyPurposeOplog)
	if err != nil {
		return nil, fmt.Errorf("create: $41 $3: unable to get oplog wrapper: %w", err)
	}

	var new$1 *$1
	_, err = r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
		func(_ db.Reader, w db.Writer) error {
			new$1 = $2.clone()
			return w.Create(ctx, new$1, db.WithOplog(oplogWrapper, $2.oplog(oplog.OpType_OP_TYPE_CREATE)))
		},
	)

	if err != nil {
		if db.IsUniqueError(err) {
			return nil, fmt.Errorf("create: $41 $3: in ${14:${11/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: %s: name %s already exists: %w",
				$2.$12, $2.Name, db.ErrNotUnique)
		}
		return nil, fmt.Errorf("create: $41 $3: in $14: %s: %w", $2.$12, err)
	}
	return new$1, nil
}
endsnippet

snippet wt-update "UpdateResource"
// Update${1:Resource} updates the repository entry for ${2:`!p snip.rv = t[1].lower()[0]`}.PublicId with the
// values in $2 for the fields listed in fieldMaskPaths.
// It returns a new $1 containing the updated values and a count of the number of records updated.
// $2 is not changed.
//
// $2 must contain a valid PublicId.
// Only $2.Name and $2.Description can be updated.
// If $2.Name is set to a non-empty string, it must be unique within $2.${11:Parent}Id.
//
// An attribute of $2 will be set to NULL in the database if the attribute
// in $2 is the zero value and it is included in fieldMaskPaths.
func (r *Repository) Update$1(ctx context.Context, scopeId string, $2 *$1, version uint32, fieldMaskPaths []string, opt ...Option) (*$1, int, error) {
	if $2 == nil {
		return nil, db.NoRowsAffected, fmt.Errorf("update: ${41:`!v expand('%:p:h:t')`} ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: %w", db.ErrNilParameter)
	}
	if $2.$1 == nil {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: embedded $1: %w", db.ErrNilParameter)
	}
	if $2.PublicId == "" {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: missing public id: %w", db.ErrInvalidParameter)
	}
	if version == 0 {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: no version supplied: %w", db.ErrInvalidParameter)
	}
	if scopeId == "" {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: no scopeId: %w", db.ErrNilParameter)
	}

	for _, f := range fieldMaskPaths {
		switch {
		case strings.EqualFold("Name", f):
		case strings.EqualFold("Description", f):
		default:
			return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: field: %s: %w", f, db.ErrInvalidFieldMask)
		}
	}
	var dbMask, nullFields []string
	dbMask, nullFields = dbcommon.BuildUpdatePaths(
		map[string]interface{}{
			"Name":        $2.Name,
			"Description": $2.Description,
		},
		fieldMaskPaths,
	)
	if len(dbMask) == 0 && len(nullFields) == 0 {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: %w", db.ErrEmptyFieldMask)
	}

	oplogWrapper, err := r.kms.GetWrapper(ctx, scopeId, kms.KeyPurposeOplog)
	if err != nil {
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: unable to get oplog wrapper: %w", err)
	}

	var rowsUpdated int
	var returned$1 *$1
	_, err = r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
		func(_ db.Reader, w db.Writer) error {
			returned$1 = $2.clone()
			var err error
			rowsUpdated, err = w.Update(ctx, returned$1, dbMask, nullFields,
				db.WithOplog(oplogWrapper, $2.oplog(oplog.OpType_OP_TYPE_UPDATE)),
				db.WithVersion(&version))
			if err == nil && rowsUpdated > 1 {
				return db.ErrMultipleRecords
			}
			return err
		},
	)

	if err != nil {
		if db.IsUniqueError(err) {
			return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: %s: name %s already exists: %w",
				$2.PublicId, $2.Name, db.ErrNotUnique)
		}
		return nil, db.NoRowsAffected, fmt.Errorf("update: $41 $3: %s: %w", $2.PublicId, err)
	}

	return returned$1, rowsUpdated, nil
}
endsnippet

snippet wt-lookup "LookupResource"
// Lookup${1:Resource}
// will look up a ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}
// in the repository.
// If the $3 is not found, it will return nil, nil.
// All options are ignored.
func (r *Repository) Lookup$1(ctx context.Context, publicId string, opt ...Option) (*$1, error) {
	if publicId == "" {
		return nil, fmt.Errorf("lookup: ${41:`!v expand('%:p:h:t')`} $3: missing public id %w", db.ErrInvalidParameter)
	}
	${2:`!p snip.rv = t[1].lower()[0]`} := alloc$1()
	$2.PublicId = publicId
	if err := r.reader.LookupByPublicId(ctx, $2); err != nil {
		if errors.Is(err, db.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, fmt.Errorf("lookup: $41 $3: failed %w for %s", err, publicId)
	}
	return $2, nil
}
endsnippet

snippet wt-list "ListResources"
// List${1:ResourceExample}s returns a slice of $1s for the ${13:parentExampleId}.
// WithLimit is the only option supported.
func (r *Repository) List$1s(ctx context.Context, $13 string, opt ...Option) ([]*$1, error) {
	if $13 == "" {
		return nil, fmt.Errorf("list: ${41:`!v expand('%:p:h:t')`} ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: missing ${15:${13/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: %w", db.ErrInvalidParameter)
	}
	opts := getOpts(opt...)
	limit := r.defaultLimit
	if opts.withLimit != 0 {
		// non-zero signals an override of the default limit for the repo.
		limit = opts.withLimit
	}
	var ${6:`!p snip.rv = t[1].lower()[0] + t[1][1:] + 's'`} []*$1
	err := r.reader.SearchWhere(ctx, &$6, "${17:${13/([a-z]*)([A-Z]+)/(?1:$1_)\L$2\E/g}} = ?", []interface{}{$13}, db.WithLimit(limit))
	if err != nil {
		return nil, fmt.Errorf("list: $41 $3: %w", err)
	}
	return $6, nil
}
endsnippet

snippet wt-delete "DeleteResource"
// Delete${1:ResourceExample} deletes
// the ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}
// for the provided id from the
// repository returning a count of the number of records deleted.
// All options are ignored.
func (r *Repository) Delete$1(ctx context.Context, scopeId string, publicId string, opt ...Option) (int, error) {
	if publicId == "" {
		return db.NoRowsAffected, fmt.Errorf("delete: ${41:`!v expand('%:p:h:t')`} $3: missing public id: %w", db.ErrInvalidParameter)
	}
	if scopeId == "" {
		return db.NoRowsAffected, fmt.Errorf("delete: $41 $3: no scopeId: %w", db.ErrNilParameter)
	}
	${2:`!p snip.rv = t[1].lower()[0]`} := alloc$1()
	$2.PublicId = publicId

	oplogWrapper, err := r.kms.GetWrapper(ctx, scopeId, kms.KeyPurposeOplog)
	if err != nil {
		return db.NoRowsAffected, fmt.Errorf("delete: $41 $3: unable to get oplog wrapper: %w", err)
	}

	var rowsDeleted int
	_, err = r.writer.DoTx(
		ctx, db.StdRetryCnt, db.ExpBackoff{},
		func(_ db.Reader, w db.Writer) (err error) {
			d$2 := $2.clone()
			rowsDeleted, err = w.Delete(ctx, d$2, db.WithOplog(oplogWrapper, $2.oplog(oplog.OpType_OP_TYPE_DELETE)))
			if err == nil && rowsDeleted > 1 {
				return db.ErrMultipleRecords
			}
			return err
		},
	)

	if err != nil {
		return db.NoRowsAffected, fmt.Errorf("delete: $41 $3: %s: %w", publicId, err)
	}

	return rowsDeleted, nil
}
endsnippet

snippet wt-enc-struct "encrypt/decrypt stuct"
func (${2:`!p snip.rv = t[1].lower()[0]`} *${1:Resource}) encrypt(ctx context.Context, cipher wrapping.Wrapper) error {
	if err := structwrapping.WrapStruct(ctx, cipher, $2.$1, nil); err != nil {
		return fmt.Errorf("error encrypting ${3:${1/([a-z]*)([A-Z]+)/(?1:$1 )\L$2\E/g}}: %w", err)
	}
	return nil
}

func ($2 *$1) decrypt(ctx context.Context, cipher wrapping.Wrapper) error {
	if err := structwrapping.UnwrapStruct(ctx, cipher, $2.$1, nil); err != nil {
		return fmt.Errorf("error decrypting $3: %w", err)
	}
	return nil
}
endsnippet
