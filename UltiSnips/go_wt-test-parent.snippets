snippet wt-test-create-parent "test parent CreateResource"
func TestRepository_Create${1:Resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	var tests = []struct {
		name      string
		in        *$1
		opts      []Option
		want      *$1
		wantErr errors.Code
	}{
		{
			name:      "nil-$1",
			wantErr: errors.InvalidParameter,
		},
		{
			name:      "nil-embedded-$1",
			in:        &$1{},
			wantErr: errors.InvalidParameter,
		},
		{
			name: "valid-no-options",
			in: &$1{
				$1: &store.$1{},
			},
			want: &$1{
				$1: &store.$1{},
			},
		},
		{
			name: "valid-with-name",
			in: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			want: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
		},
		{
			name: "valid-with-description",
			in: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			want: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()
			kms := kms.TestKms(t, conn, wrapper)
			repo, err := NewRepository(rw, rw, kms)
			require.NoError(err)
			require.NotNil(repo)
			${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
			if tt.in != nil && tt.in.$1 != nil {
				tt.in.ScopeId = ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId()
				assert.Empty(tt.in.PublicId)
			}
			got, err := repo.Create$1(ctx, tt.in, tt.opts...)
			if tt.wantErr != 0 {
				assert.Truef(errors.Match(errors.T(tt.wantErr), err), "want err: %q got: %q", tt.wantErr, err)
				assert.Nil(got)
				return
			}
			require.NoError(err)
			assert.Empty(tt.in.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.GetPublicId())
			assert.NotSame(tt.in, got)
			assert.Equal(tt.want.Name, got.Name)
			assert.Equal(tt.want.Description, got.Description)
			assert.Equal(got.CreateTime, got.UpdateTime)
			assert.NoError(db.TestVerifyOplog(t, rw, got.GetPublicId(), db.WithOperation(oplog.OpType_OP_TYPE_CREATE), db.WithCreateNotBefore(10*time.Second)))
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		ctx := context.Background()
		kms := kms.TestKms(t, conn, wrapper)
		repo, err := NewRepository(rw, rw, kms)
		require.NoError(err)
		require.NotNil(repo)
		$21, $22 := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
		in := &$1{
			$1: &store.$1{
				ScopeId: $23.GetPublicId(),
				Name:    "test-name-repo",
			},
		}

		got, err := repo.Create$1(ctx, in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.GetPublicId())
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		got2, err := repo.Create$1(ctx, in)
		assert.Truef(errors.Match(errors.T(errors.NotUnique), err), "want err code: %v got err: %v", errors.NotUnique, err)
		assert.Nil(got2)
	})

	t.Run("valid-duplicate-names-diff-scopes", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		ctx := context.Background()
		kms := kms.TestKms(t, conn, wrapper)
		repo, err := NewRepository(rw, rw, kms)
		require.NoError(err)
		require.NotNil(repo)
		org, prj := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.ScopeId = prj.GetPublicId()
		got, err := repo.Create$1(ctx, in)
		require.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.GetPublicId())
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)
		assert.Equal(got.CreateTime, got.UpdateTime)

		in2.ScopeId = org.GetPublicId()
		got2, err := repo.Create$1(ctx, in2)
		require.NoError(err)
		require.NotNil(got2)
		assertPublicId(t, $1Prefix, got2.GetPublicId())
		assert.NotSame(in2, got2)
		assert.Equal(in2.Name, got2.Name)
		assert.Equal(in2.Description, got2.Description)
		assert.Equal(got2.CreateTime, got2.UpdateTime)
	})
}
endsnippet

snippet wt-test-update-parent "test parent UpdateResource"
func TestRepository_Update${1:Resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	changeName := func(n string) func(*$1) *$1 {
		return func(${2:`!p snip.rv = t[1].lower()[0]`} *$1) *$1 {
			$2.Name = n
			return $2
		}
	}

	changeDescription := func(d string) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.Description = d
			return $2
		}
	}

	makeNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return nil
		}
	}

	makeEmbeddedNil := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			return &$1{}
		}
	}

	deletePublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = ""
			return $2
		}
	}

	nonExistentPublicId := func() func(*$1) *$1 {
		return func($2 *$1) *$1 {
			$2.PublicId = "abcd_OOOOOOOOOO"
			return $2
		}
	}

	combine := func(fns ...func($2 *$1) *$1) func(*$1) *$1 {
		return func($2 *$1) *$1 {
			for _, fn := range fns {
				$2 = fn($2)
			}
			return $2
		}
	}

	var tests = []struct {
		name      string
		orig      *$1
		chgFn     func(*$1) *$1
		masks     []string
		want      *$1
		wantCount int
		wantErr errors.Code
	}{
		{
			name: "nil-${3:`!p snip.rv = t[1].lower()[0] + t[1][1:]`}",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeNil(),
			masks:     []string{"Name", "Description"},
			wantErr: errors.InvalidParameter,
		},
		{
			name: "nil-embedded-$3",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     makeEmbeddedNil(),
			masks:     []string{"Name", "Description"},
			wantErr: errors.InvalidParameter,
		},
		{
			name: "no-public-id",
			orig: &$1{
				$1: &store.$1{},
			},
			chgFn:     deletePublicId(),
			masks:     []string{"Name", "Description"},
			wantErr: errors.InvalidParameter,
		},
		{
			name: "updating-non-existent-$3",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     combine(nonExistentPublicId(), changeName("test-update-name-repo")),
			masks:     []string{"Name"},
			wantErr: errors.RecordNotFound,
		},
		{
			name: "empty-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			wantErr: errors.EmptyFieldMask,
		},
		{
			name: "read-only-fields-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"PublicId", "CreateTime", "UpdateTime", "ScopeId"},
			wantErr: errors.InvalidFieldMask,
		},
		{
			name: "unknown-field-in-field-mask",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn:     changeName("test-update-name-repo"),
			masks:     []string{"Bilbo"},
			wantErr: errors.InvalidFieldMask,
		},
		{
			name: "change-name",
			orig: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			chgFn: changeName("test-update-name-repo"),
			masks: []string{"Name"},
			want: &$1{
				$1: &store.$1{
					Name: "test-update-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-description",
			orig: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			chgFn: changeDescription("test-update-description-repo"),
			masks: []string{"Description"},
			want: &$1{
				$1: &store.$1{
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "change-name-and-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("test-update-name-repo")),
			masks: []string{"Name", "Description"},
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name: "test-name-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-name",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Description"},
			chgFn: combine(changeDescription("test-update-description-repo"), changeName("")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-update-description-repo",
				},
			},
			wantCount: 1,
		},
		{
			name: "do-not-delete-description",
			orig: &$1{
				$1: &store.$1{
					Name:        "test-name-repo",
					Description: "test-description-repo",
				},
			},
			masks: []string{"Name"},
			chgFn: combine(changeDescription(""), changeName("test-update-name-repo")),
			want: &$1{
				$1: &store.$1{
					Name:        "test-update-name-repo",
					Description: "test-description-repo",
				},
			},
			wantCount: 1,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()
			kms := kms.TestKms(t, conn, wrapper)
			repo, err := NewRepository(rw, rw, kms)
			assert.NoError(err)
			require.NotNil(repo)

			${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
			tt.orig.ScopeId = ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId()
			orig, err := repo.Create$1(ctx, tt.orig)
			assert.NoError(err)
			require.NotNil(orig)

			if tt.chgFn != nil {
				orig = tt.chgFn(orig)
			}
			got, gotCount, err := repo.Update$1(ctx, orig, 1, tt.masks)
			if tt.wantErr != 0 {
				assert.Truef(errors.Match(errors.T(tt.wantErr), err), "want err: %q got: %q", tt.wantErr, err)
				assert.Equal(tt.wantCount, gotCount, "row count")
				assert.Nil(got)
				return
			}
			assert.NoError(err)
			assert.Empty(tt.orig.PublicId)
			require.NotNil(got)
			assertPublicId(t, $1Prefix, got.GetPublicId())
			assert.Equal(tt.wantCount, gotCount, "row count")
			assert.NotSame(tt.orig, got)
			assert.Equal(tt.orig.ScopeId, got.ScopeId)
			dbassert := dbassert.New(t, conn.DB())
			if tt.want.Name == "" {
				dbassert.IsNull(got, "name")
				return
			}
			assert.Equal(tt.want.Name, got.Name)
			if tt.want.Description == "" {
				dbassert.IsNull(got, "description")
				return
			}
			assert.Equal(tt.want.Description, got.Description)
			if tt.wantCount > 0 {
				assert.NoError(db.TestVerifyOplog(t, rw, got.GetPublicId(), db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))
			}
		})
	}

	t.Run("invalid-duplicate-names", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		ctx := context.Background()
		kms := kms.TestKms(t, conn, wrapper)
		repo, err := NewRepository(rw, rw, kms)
		assert.NoError(err)
		require.NotNil(repo)

		name := "test-dup-name"
		$21, $22 := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
		${25:`!p snip.rv = t[2] + 's'`} := Test$1s(t, conn, wrapper, $23.GetPublicId(), 2)

		$2A, $2B := $25[0], $25[1]

		$2A.Name = name
		got1, gotCount1, err := repo.Update$1(ctx, $2A, 1, []string{"name"})
		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(name, got1.Name)
		assert.Equal(1, gotCount1, "row count")
		assert.NoError(db.TestVerifyOplog(t, rw, $2A.GetPublicId(), db.WithOperation(oplog.OpType_OP_TYPE_UPDATE), db.WithCreateNotBefore(10*time.Second)))

		$2B.Name = name
		got2, gotCount2, err := repo.Update$1(ctx, $2B, 1, []string{"name"})
		assert.Truef(errors.Match(errors.T(errors.NotUnique), err), "want err code: %v got err: %v", errors.NotUnique, err)
		assert.Nil(got2)
		assert.Equal(db.NoRowsAffected, gotCount2, "row count")
	})

	t.Run("valid-duplicate-names-diff-scopes", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		ctx := context.Background()
		kms := kms.TestKms(t, conn, wrapper)
		repo, err := NewRepository(rw, rw, kms)
		assert.NoError(err)
		require.NotNil(repo)

		org, prj := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
		in := &$1{
			$1: &store.$1{
				Name: "test-name-repo",
			},
		}
		in2 := in.clone()

		in.ScopeId = prj.GetPublicId()
		got, err := repo.Create$1(ctx, in)
		assert.NoError(err)
		require.NotNil(got)
		assertPublicId(t, $1Prefix, got.GetPublicId())
		assert.NotSame(in, got)
		assert.Equal(in.Name, got.Name)
		assert.Equal(in.Description, got.Description)

		in2.ScopeId = org.GetPublicId()
		in2.Name = "first-name"
		got2, err := repo.Create$1(ctx, in2)
		assert.NoError(err)
		require.NotNil(got2)
		got2.Name = got.Name
		got3, gotCount3, err := repo.Update$1(ctx, got2, 1, []string{"name"})
		assert.NoError(err)
		require.NotNil(got3)
		assert.NotSame(got2, got3)
		assert.Equal(got.Name, got3.Name)
		assert.Equal(got2.Description, got3.Description)
		assert.Equal(1, gotCount3, "row count")
	})

	t.Run("change-scope-id", func(t *testing.T) {
		assert, require := assert.New(t), require.New(t)
		ctx := context.Background()
		kms := kms.TestKms(t, conn, wrapper)
		repo, err := NewRepository(rw, rw, kms)
		assert.NoError(err)
		require.NotNil(repo)

		iamRepo := iam.TestRepo(t, conn, wrapper)
		_, prj1 := iam.TestScopes(t, iamRepo)
		_, prj2 := iam.TestScopes(t, iamRepo)
		$2A, $2B := Test$1s(t, conn, wrapper, prj1.GetPublicId(), 1)[0], Test$1s(t, conn, wrapper, prj2.GetPublicId(), 1)[0]
		assert.NotEqual($2A.ScopeId, $2B.ScopeId)
		orig := $2A.clone()

		$2A.ScopeId = $2B.ScopeId
		assert.Equal($2A.ScopeId, $2B.ScopeId)

		got1, gotCount1, err := repo.Update$1(ctx, $2A, 1, []string{"name"})

		assert.NoError(err)
		require.NotNil(got1)
		assert.Equal(orig.ScopeId, got1.ScopeId)
		assert.Equal(1, gotCount1, "row count")
	})
}
endsnippet

snippet wt-test-lookup-parent "test parent LookupResource"
func TestRepository_Lookup${1:Resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
	${2:`!p snip.rv = t[1].lower()[0]`} := Test$1s(t, conn, wrapper, ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId(), 1)[0]
	${4:badId}, err := new$1Id()
	assert.NoError(t, err)
	require.NotNil(t, $4)

	var tests = []struct {
		name      string
		id        string
		want      *$1
		wantErr   errors.Code
	}{
		{
			name: "valid",
			id:   $2.GetPublicId(),
			want: $2,
		},
		{
			name:    "empty-public-id",
			id:      "",
			wantErr: errors.InvalidParameter,
		},
		{
			name:    "not-found",
			id:      $4,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()
			kms := kms.TestKms(t, conn, wrapper)
			repo, err := NewRepository(rw, rw, kms)
			assert.NoError(err)
			require.NotNil(repo)

			got, err := repo.Lookup$1(ctx, tt.id)
			if tt.wantErr != 0 {
				assert.Truef(errors.Match(errors.T(tt.wantErr), err), "want err: %q got: %q", tt.wantErr, err)
				assert.Nil(got)
				return
			}
			require.NoError(err)

			switch {
			case tt.want == nil:
				assert.Nil(got)
			case tt.want != nil:
				assert.NotNil(got)
				assert.Equal(got, tt.want)
			}
		})
	}
}
endsnippet

snippet wt-test-list-parent "test parent ListResources"
func TestRepository_List${1:ResourceExample}s_Multiple_Scopes(t *testing.T) {
	t.Parallel()
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)
	kms := kms.TestKms(t, conn, wrapper)

	assert, require := assert.New(t), require.New(t)
	repo, err := NewRepository(rw, rw, kms)
	assert.NoError(err)
	require.NotNil(repo)

	const numPerScope = ${88:10}
	var ${89:$23s} []string
	var total int
	for i := 0; i < numPerScope; i++ {
		${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
		$89 = append($89, prj.GetPublicId())
		Test$1s(t, conn, wrapper, ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId(), numPerScope)
		total += numPerScope
	}

	got, err := repo.List$1s(context.Background(), $23s)
	require.NoError(err)
	assert.Equal(total, len(got))
}
endsnippet

snippet wt-test-new-resource-parent "TestResource_New parent"
func Test${1:Resource}_New(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	wrapper := db.TestWrapper(t)
	rw := db.New(conn)

	${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
	${31:`!p snip.rv = t[11].lower()[0] + t[11][1:]`} := Test${11:Parent}s(t, conn, ${80:wrapper,} ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId(), 1)[0]

	type args struct {
		${13:`!p snip.rv = t[11].lower()[0] + t[11][1:] + 'Id'`} string
		opts    []Option
	}

	tests := []struct {
		name    string
		args    args
		want    *$1
		wantErr bool
	}{
		{
			name: "missing-${14:`!p snip.rv = t[11].lower()[0] + t[11][1:]`}-id",
			args: args{
				$13: "",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "valid-no-options",
			args: args{
				$13: $31.GetPublicId(),
			},
			want: &$1{
				$1: &store.$1{
					${12:`!p snip.rv = t[11] + 'Id'`}:  $31.GetPublicId(),
				},
			},
		},
		{
			name: "valid-with-name",
			args: args{
				$13: $31.GetPublicId(),
				opts: []Option{
					WithName("test-name"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$12:  $31.GetPublicId(),
					Name: "test-name",
				},
			},
		},
		{
			name: "valid-with-description",
			args: args{
				$13: $31.GetPublicId(),
				opts: []Option{
					WithDescription("test-description"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$12:  $31.GetPublicId(),
					Description: "test-description",
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()
			got, err := New$1(tt.args.$13, tt.args.opts...)
			if tt.wantErr {
				assert.Error(err)
				require.Nil(got)
				return
			}
			require.NoError(err)
			require.NotNil(got)

			assert.Emptyf(got.PublicId, "PublicId set")
			assert.Equal(tt.want, got)

			id, err := new$1Id()
			assert.NoError(err)

			tt.want.PublicId = id
			got.PublicId = id

			err2 := rw.Create(ctx, got)
			assert.NoError(err2)
		})
	}
}
endsnippet

snippet wt-test-enc-new-resource-parent "TestEncryptedResource_New parent"
func Test${1:Resource}_New(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	wrapper := db.TestWrapper(t)
	rw := db.New(conn)
	kkms := kms.TestKms(t, conn, wrapper)

	${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
	${31:`!p snip.rv = t[11].lower()[0] + t[11][1:]`} := Test${11:Parent}s(t, conn, ${80:wrapper,} ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId(), 1)[0]

	type args struct {
		${13:`!p snip.rv = t[11].lower()[0] + t[11][1:] + 'Id'`} string
		opts    []Option
	}

	tests := []struct {
		name    string
		args    args
		want    *$1
		wantErr bool
	}{
		{
			name: "missing-${14:`!p snip.rv = t[11].lower()[0] + t[11][1:]`}-id",
			args: args{
				$13: "",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "valid-no-options",
			args: args{
				$13: $31.GetPublicId(),
			},
			want: &$1{
				$1: &store.$1{
					${12:`!p snip.rv = t[11] + 'Id'`}:  $31.GetPublicId(),
				},
			},
		},
		{
			name: "valid-with-name",
			args: args{
				$13: $31.GetPublicId(),
				opts: []Option{
					WithName("test-name"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$12:  $31.GetPublicId(),
					Name: "test-name",
				},
			},
		},
		{
			name: "valid-with-description",
			args: args{
				$13: $31.GetPublicId(),
				opts: []Option{
					WithDescription("test-description"),
				},
			},
			want: &$1{
				$1: &store.$1{
					$12:  $31.GetPublicId(),
					Description: "test-description",
				},
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()

			databaseWrapper, err := kkms.GetWrapper(ctx, prj.GetPublicId(), kms.KeyPurposeDatabase)
			require.NoError(err)
			require.NotNil(databaseWrapper)

			got, err := New$1(tt.args.$13, tt.args.opts...)
			if tt.wantErr {
				assert.Error(err)
				require.Nil(got)
				return
			}
			require.NoError(err)
			require.NotNil(got)

			want := tt.want
			assert.Empty(got.${81:CtField})
			assert.Equal(want, got)
			require.NoError(got.encrypt(ctx, databaseWrapper))

			err2 := rw.Create(ctx, got)
			assert.NoError(err2)
		})
	}
}
endsnippet

snippet wt-test-delete-parent "test parent DeleteResource"
func TestRepository_Delete${1:Resource}(t *testing.T) {
	conn, _ := db.TestSetup(t, "postgres")
	rw := db.New(conn)
	wrapper := db.TestWrapper(t)

	${21:org}, ${22:prj} := iam.TestScopes(t, iam.TestRepo(t, conn, wrapper))
	${2:`!p snip.rv = t[1].lower()[0]`} := Test$1s(t, conn, wrapper, ${23:`!p snip.rv=t[21] if t[21] != '_' else t[22]`}.GetPublicId(), 1)[0]
	${4:badId}, err := new$1Id()
	assert.NoError(t, err)
	require.NotNil(t, $4)

	var tests = []struct {
		name      string
		id        string
		want      int
		wantErr   errors.Code
	}{
		{
			name: "found",
			id:   $2.GetPublicId(),
			want: 1,
		},
		{
			name:    "not-found",
			id:      $4,
		},
		{
			name:    "empty-id",
			id:      "",
			wantErr: errors.InvalidParameter,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			assert, require := assert.New(t), require.New(t)
			ctx := context.Background()
			kms := kms.TestKms(t, conn, wrapper)
			repo, err := NewRepository(rw, rw, kms)
			assert.NoError(err)
			require.NotNil(repo)

			got, err := repo.Delete$1(ctx, tt.id)
			if tt.wantErr != 0 {
				assert.Truef(errors.Match(errors.T(tt.wantErr), err), "want err: %q got: %q", tt.wantErr, err)
				return
			}
			assert.NoError(err)
			assert.Equal(tt.want, got, "row count")
		})
	}
}
endsnippet
